import random, json, re
from pathlib            import Path
from collections        import deque

from modules.tictactoe  import TicTacToe
from nlp_utils          import clean_text, lemmatize_text, correct_spelling
from intent_classifier  import IntentClassifier
from sentiment          import get_sentiment
from recommendations    import recommend          # –≤–∞—à –º–æ–¥—É–ª—å —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# 1) –¥–∞–Ω–Ω—ã–µ –∏ –º–æ–¥–µ–ª–∏
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
BASE_DIR            = Path(__file__).parent
DATA_DIR            = BASE_DIR / 'data'
CUSTOM_INTENTS_FILE = DATA_DIR / 'custom_intents.json'
CATALOG_FILE        = DATA_DIR / 'product_catalog.json'

with open(DATA_DIR / 'intents_dataset.json', encoding='utf-8') as f:
    INTENTS = json.load(f)
if CUSTOM_INTENTS_FILE.exists():
    INTENTS.update(json.loads(CUSTOM_INTENTS_FILE.read_text('utf-8')))

with open(CATALOG_FILE, encoding='utf-8') as f:
    PRODUCT_CATALOG = json.load(f)

clf = IntentClassifier(DATA_DIR)
clf.load()

DICTIONARY = {
    ex.lower()
    for data in INTENTS.values() if isinstance(data, dict)
    for ex in data.get('examples', [])
}

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def _save_custom_intents(data: dict):
    DATA_DIR.mkdir(exist_ok=True)
    CUSTOM_INTENTS_FILE.write_text(
        json.dumps(data, ensure_ascii=False, indent=4),
        encoding='utf-8'
    )

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def get_response(text: str, user_data: dict, history: deque) -> str:
    """
    –ì–ª–∞–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ—Ç–≤–µ—Ç–∞ –±–æ—Ç–∞.
    """
    # ‚Äî‚îÄ‚îÄ –∫—Ä–∞—Ç–∫–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–∞–º—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Äî‚îÄ‚îÄ
    prefs        = user_data.setdefault('preferences', {})
    custom_ans   = user_data.setdefault('custom_answers', {})
    last_int     = user_data.get('last_intent')
    asked_fup    = user_data.get('asked_followup', False)
    last_bot     = user_data.get('last_bot')
    waiting_teach = user_data.get('awaiting_teach', False)

    low       = text.strip().lower()
    low_clean = re.sub(r'[^–∞-—è—ëa-z0-9\s]', '', low)

    # ‚Äî‚Äî‚Äî –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —Ç–∏–ø—ã –º–Ω–æ–∂–µ—Å—Ç–≤ –≤ user_data ‚Äî‚Äî‚Äî
    if not isinstance(user_data.get('asked_questions'), set):
        user_data['asked_questions'] = set(user_data.get('asked_questions', []))

    if not isinstance(user_data.get('shown_products'), set):
        user_data['shown_products'] = set(user_data.get('shown_products', []))

    AFFIRM = {'–¥–∞', '–∞–≥–∞', '–æ–∫', '–æ–∫–µ–π', '–∫–æ–Ω–µ—á–Ω–æ', '—Ö–æ—Ä–æ—à–æ', '–¥–∞–≤–∞–π', '—Ö–æ—á—É'}

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ 0. small-talk ¬´–∫–∞–∫ –¥–µ–ª–∞¬ª / ¬´–∫–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ¬ª ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    if re.search(r'\b–∫–∞–∫\s+(–¥–µ–ª[–∞–∏]|—Ç—ã)\b', low_clean):
        return random.choice([
            "–£ –º–µ–Ω—è –≤—Å—ë –æ—Ç–ª–∏—á–Ω–æ, —Å–ø–∞—Å–∏–±–æ! –ê —É —Ç–µ–±—è –∫–∞–∫?",
            "–í—Å—ë —Ö–æ—Ä–æ—à–æ, —Ä–∞–±–æ—Ç–∞—é –Ω–µ –ø–æ–∫–ª–∞–¥–∞—è —Ç—Ä–∞–Ω–∑–∏—Å—Ç–æ—Ä–æ–≤ üòÑ –ê —Ç—ã?"
        ])
    if '–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏' in low_clean:
        return random.choice([
            "–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å—É–ø–µ—Ä! –ö–∞–∫ —Ç–≤–æ—ë?",
            "–ë–æ–¥—Ä–æ–µ –∏ –≤–µ—Å—ë–ª–æ–µ. –£ —Ç–µ–±—è –∫–∞–∫–æ–µ?"
        ])

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ 0a. –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –ñ–ê–ù–†–ê (movie/music/‚Ä¶) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    if user_data.get('awaiting_genre'):
        cat   = user_data.pop('awaiting_genre')       # movie | music | game | series
        genre = low_clean
        reply = recommend(cat, genre)

        prefs[f"{cat}_genre"] = genre                 # –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –∂–∞–Ω—Ä
        user_data['last_intent'] = cat
        user_data['last_bot']    = reply
        return reply

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ 0b. —Å–±—Ä–æ—Å —Ä–µ–∂–∏–º–∞ ¬´–µ—â—ë¬ª –¥–ª—è —Ä–µ–∫–ª–∞–º—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    if user_data.get('expecting_more_ads') and low not in {"–µ—â–µ", "–µ—â—ë", "–µ—â–µ —Ä–∞–∑", "–µ—â—ë —Ä–∞–∑"}:
        user_data['expecting_more_ads'] = False
        user_data['shown_products'].clear()

        # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ 0b. –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –Ω–∞–∑–≤–∞–ª –∫–∞—Ç–µ–≥–æ—Ä–∏—é (–∫—Ä–æ–≤–∞—Ç–∏/–º–∞—Ç—Ä–∞—Å—ã) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    for cat in PRODUCT_CATALOG:                               # cat = "–ö—Ä–æ–≤–∞—Ç–∏", "–ú–∞—Ç—Ä–∞—Å—ã"
        # –∏—â–µ–º —Å–ª–æ–≤–æ-–∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–Ω—É—Ç—Ä–∏ —Ç–µ–∫—Å—Ç–∞ –ø–æ –≥—Ä–∞–Ω–∏—Ü–µ —Å–ª–æ–≤–∞
        if re.search(rf'\b{cat.lower()}\b', low_clean):
            # –µ—Å–ª–∏ –¥–æ —ç—Ç–æ–≥–æ –±–æ—Ç —Å–ø—Ä–∞—à–∏–≤–∞–ª ¬´–∫—Ä–æ–≤–∞—Ç–∏ –∏–ª–∏ –º–∞—Ç—Ä–∞—Å—ã¬ª ‚Äì —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ
            user_data.pop('awaiting_ad_choice', None)

            user_data.update(
                shopping_category = cat,      # –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—ã–±–æ—Ä
                ad_offer_done     = False,    # –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π –ø–æ–¥–±–æ—Ä
                ad_offer_shown    = True      # –ø–æ–º–µ—á–∞–µ–º, —á—Ç–æ —Ä–µ–∫–ª–∞–º–∞ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞
            )
            subcats = ", ".join(PRODUCT_CATALOG[cat].keys())
            return f"–û—Ç–ª–∏—á–Ω–æ! –ö–∞–∫–∏–µ –∏–º–µ–Ω–Ω–æ {cat.lower()} —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã: {subcats}?"

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ 1. –∑–∞–ø—É—Å–∫ —Ä–µ–∫–ª–∞–º—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    def advert_prompt() -> str:
        
        user_data['awaiting_ad_choice'] = True
        return ("–ö—Å—Ç–∞—Ç–∏, —É –Ω–∞—Å –≤ –∫–∞—Ç–∞–ª–æ–≥–µ –µ—Å—Ç—å –æ—Ç–ª–∏—á–Ω—ã–µ **–∫—Ä–æ–≤–∞—Ç–∏** –∏ **–º–∞—Ç—Ä–∞—Å—ã**.\n"
                "–ß—Ç–æ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–µ–µ: –∫—Ä–æ–≤–∞—Ç–∏ –∏–ª–∏ –º–∞—Ç—Ä–∞—Å—ã?")

    if (low_clean in AFFIRM and '–ø–æ–¥–±–µ—Ä—É –∫—Ä–æ–≤–∞—Ç—å' in (last_bot or '').lower()):
        user_data['ad_offer_shown'] = True
        return advert_prompt()

    if any(k in low for k in ('/catalog', '–∫–∞—Ç–∞–ª–æ–≥', '—Ç–æ–≤–∞—Ä—ã')):
        user_data['ad_offer_shown'] = True
        return advert_prompt()

    if len(history) >= 3 and not user_data.get('ad_offer_shown') \
       and not user_data.get('awaiting_ad_choice'):
        user_data['ad_offer_shown'] = True
        return advert_prompt()

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ 2. —Ä–µ–∫–ª–∞–º–∞: –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    if user_data.get('awaiting_ad_choice'):
        if low_clean in AFFIRM:
            return "–í—ã–±–µ—Ä–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞: –∫—Ä–æ–≤–∞—Ç–∏ –∏–ª–∏ –º–∞—Ç—Ä–∞—Å—ã?"
        for cat in PRODUCT_CATALOG:
            if low_clean == cat.lower():
                user_data['shopping_category'] = cat
                del user_data['awaiting_ad_choice']
                subs = ", ".join(PRODUCT_CATALOG[cat].keys())
                return f"–û—Ç–ª–∏—á–Ω–æ! –ö–∞–∫–∏–µ –∏–º–µ–Ω–Ω–æ {cat.lower()} –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç: {subs}?"
        del user_data['awaiting_ad_choice']   # –æ—Ç–≤–µ—Ç –±—ã–ª –Ω–µ–ø–æ–Ω—è—Ç–µ–Ω

    # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø–æ–Ω—Ç–∞–Ω–Ω–æ –≤–≤—ë–ª ¬´–∫—Ä–æ–≤–∞—Ç–∏¬ª / ¬´–º–∞—Ç—Ä–∞—Å—ã¬ª
    if low_clean in (c.lower() for c in PRODUCT_CATALOG):
        user_data.update(
            shopping_category = next(c for c in PRODUCT_CATALOG if c.lower() == low_clean),
            ad_offer_done     = False
        )
        cat  = user_data['shopping_category']
        subs = ", ".join(PRODUCT_CATALOG[cat].keys())
        return f"–•–æ—Ä–æ—à–æ! –ö–∞–∫–∏–µ {cat.lower()} —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã: {subs}?"

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ 3. —Ä–µ–∫–ª–∞–º–∞: –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è + –ø–µ—Ä–≤–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    if 'shopping_category' in user_data and 'shopping_subcategory' not in user_data:
        cat = user_data['shopping_category']
        for sub in PRODUCT_CATALOG[cat]:
            if low_clean == sub.lower() or sub.lower() in low_clean or low_clean in sub.lower():
                user_data.update(
                    last_ad_category    = cat,
                    last_ad_subcategory = sub,
                    expecting_more_ads  = True,
                    ad_offer_done       = True
                )
                prod = random.choice(PRODUCT_CATALOG[cat][sub])
                user_data['shown_products'].add(prod['name'])
                del user_data['shopping_category']
                return (f"–†–µ–∫–æ–º–µ–Ω–¥—É—é: *{prod['name']}*\n{prod['description']}\n"
                        f"–¶–µ–Ω–∞: {prod['price']} —Ä—É–±.\n–ü–æ–¥—Ä–æ–±–Ω–µ–µ: {prod['link']}")

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ 3b. —Ä–µ–∫–ª–∞–º–∞: ¬´–ï—â—ë¬ª ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    if user_data.get('expecting_more_ads') and low in {"–µ—â–µ", "–µ—â—ë", "–µ—â–µ —Ä–∞–∑", "–µ—â—ë —Ä–∞–∑"}:
        cat   = user_data.get('last_ad_category')
        sub   = user_data.get('last_ad_subcategory')
        shown = user_data['shown_products']
        if cat and sub:
            rest = [p for p in PRODUCT_CATALOG[cat][sub] if p['name'] not in shown]
            if not rest:
                user_data['expecting_more_ads'] = False
                shown.clear()
                return "–ü–æ–∂–∞–ª—É–π, —ç—Ç–æ –≤—Å–µ –ª—É—á—à–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ;)"
            prod = random.choice(rest)
            shown.add(prod['name'])
            return (f"–ï—â—ë –≤–∞—Ä–∏–∞–Ω—Ç: *{prod['name']}*\n{prod['description']}\n"
                    f"–¶–µ–Ω–∞: {prod['price']} —Ä—É–±.\n–ü–æ–¥—Ä–æ–±–Ω–µ–µ: {prod['link']}")

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ 4. teach-on-the-fly (–æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    if waiting_teach:
        q = user_data.pop('awaiting_teach')
        custom_ans[q] = text
        return random.choice(["–°–ø–∞—Å–∏–±–æ, –∑–∞–ø–æ–º–Ω–∏–ª!", "–û—Ç–ª–∏—á–Ω–æ, –ø—Ä–∏–Ω—è–ª –∫ —Å–≤–µ–¥–µ–Ω–∏—é!"])

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ 5. –æ—Ç–≤–µ—Ç—ã –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∑–∞–≥–æ—Ç–æ–≤–æ–∫ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    if text in custom_ans:
        return custom_ans[text]

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ 6. ¬´–ª—é–±–∏–º–æ–µ X¬ª ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    if 'awaiting_pref_topic' in user_data:
        key = user_data.pop('awaiting_pref_topic')
        prefs[key] = text
        return f"–°–ø–∞—Å–∏–±–æ! –Ø –∑–∞–ø–æ–º–Ω–∏–ª, —á—Ç–æ –º–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è {text}."

    m = re.search(r'–ª—é–±–∏–º(?:–æ–µ|–∞—è|—ã–π|—ã–µ)\s+([\w\-–∞-—è—ë]+)', low_clean)
    if m:
        topic = m.group(1)
        key   = f"favorite_{topic}"
        if key in prefs:
            return f"–ú–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è {prefs[key]}."
        user_data['awaiting_pref_topic'] = key
        return f"–ê —á—Ç–æ —Ç–µ–±–µ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –Ω—Ä–∞–≤–∏—Ç—Å—è –≤ –ø–ª–∞–Ω–µ {topic}?"

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ 7. –ø–æ–≥–æ–¥–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    if any(w in low for w in ('–ø–æ–≥–æ–¥–∞', '—Å–æ–ª–Ω—Ü–µ', '–¥–æ–∂–¥—å')) and 'weather_preference' in prefs:
        return f"–ú–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è {prefs['weather_preference']}."
    if last_int == 'weather' and any(w in low for w in ('—Å–æ–ª–Ω—Ü–µ', '–¥–æ–∂–¥—å')):
        choice = '—Å–æ–ª–Ω—Ü–µ' if '—Å–æ–ª–Ω—Ü–µ' in low else '–¥–æ–∂–¥—å'
        prefs['weather_preference'] = choice
        user_data['last_intent'] = None
        user_data['asked_followup'] = False
        return f"–ú–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è {choice}."

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ 8. Encore (¬´–µ—â—ë¬ª) –¥–ª—è —à—É—Ç–æ–∫ / —Ñ–∞–∫—Ç–æ–≤ / –º–µ–¥–∏–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    REPEATABLE = {'joke', 'jokes', 'anecdote', 'fun_fact', 'fact'}
    if low in {"–µ—â–µ", "–µ—â—ë", "–µ—â–µ —Ä–∞–∑", "–µ—â—ë —Ä–∞–∑"}:
        if last_int in REPEATABLE:
            pool = [r for r in INTENTS[last_int]['responses'] if r != last_bot]
            return random.choice(pool) if pool else random.choice(INTENTS[last_int]['responses'])
        if last_int in {"music", "movie", "game", "series"}:
            genre = prefs.get(f"{last_int}_genre")
            return recommend(last_int, genre) if genre else "–•–æ—á–µ—à—å –µ—â—ë —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π? –£–∫–∞–∂–∏ –∂–∞–Ω—Ä."

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ 9. –∫—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    if "–∫—Ä–µ—Å—Ç–∏–∫–∏" in low:
        game = TicTacToe()
        user_data['tic_tac_toe'] = game
        return f"–ù–∞—á–∏–Ω–∞–µ–º ¬´–∫—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏¬ª!\n{game.render()}\n–¢–≤–æ–π —Ö–æ–¥ (–§–æ—Ä–º–∞—Ç –°–¢–†–û–ì–û A1..C3):"

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ 10. –∂–∞–Ω—Ä –ø–æ—Å–ª–µ follow-up (media) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    for cat in {"music", "movie", "game", "series"}:
        if last_int == cat and f"{cat}_genre" not in prefs:
            genre = text.strip()
            rec   = recommend(cat, genre)
            prefs[f"{cat}_genre"] = genre
            user_data['last_bot'] = rec
            return rec

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ 11. ¬´–Ω–µ—Ç¬ª –ø–æ—Å–ª–µ follow-up (news) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    if low in {'–Ω–µ—Ç', '–Ω–µ–∞', 'no'} and last_int == 'news' and asked_fup:
        user_data['last_intent'] = None
        user_data['asked_followup'] = False
        return "–ü–æ–Ω—è—Ç–Ω–æ! –û —á—ë–º —Ö–æ—á–µ—à—å –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å?"

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ 12. sentiment-—Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    cleaned   = clean_text(text)
    corrected = ' '.join(correct_spelling(w, DICTIONARY) for w in cleaned.split())
    lemma     = lemmatize_text(corrected)
    score     = get_sentiment(lemma)
    tone      = "–ú–Ω–µ –æ—á–µ–Ω—å –∂–∞–ª—å, —á—Ç–æ —Ç–µ–±–µ –≥—Ä—É—Å—Ç–Ω–æ. " if score < -0.2 else \
                "–†–∞–¥ –∑–∞ —Ç–µ–±—è! "                       if score >  0.5 else ""

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ 13. intent-–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    intent = None
    try:
        cand = clf.predict(lemma)
        if cand in INTENTS:
            intent = cand
    except Exception:
        pass
    if intent is None:
        try:
            cand = clf.predict_fuzzy(lemma)
            if cand in INTENTS:
                intent = cand
        except Exception:
            pass

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ 13a. MEDIA-–∏–Ω—Ç–µ–Ω—Ç—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    if intent in {"music", "movie", "game", "series"}:
        user_data['last_intent']    = intent
        user_data['asked_followup'] = True
        user_data['awaiting_genre'] = intent
        return INTENTS[intent]['follow_up'][0]

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ 13b. –æ–±—ã—á–Ω—ã–µ –∏–Ω—Ç–µ–Ω—Ç—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    if intent:
        opts = INTENTS[intent]['responses']
        if last_bot in opts and len(opts) > 1:
            opts = [o for o in opts if o != last_bot]
        resp = random.choice(opts)
        user_data['last_bot'] = resp

        if not user_data['asked_followup']:
            for f in INTENTS[intent].get('follow_up', []):
                if f not in user_data['asked_questions']:
                    resp += " " + f
                    user_data['asked_questions'].add(f)
                    user_data['asked_followup'] = True
                    break

        user_data['last_intent'] = intent
        return tone + resp

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ 14. Teach-fallback ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    key = re.sub(r'[^a-z0-9]', '', low_clean) or 'intent'
    cid = f"c{key}"
    new_i = {
        "examples":  [text],
        "responses": ["–Ø –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞—é, –∫–∞–∫ –Ω–∞ —ç—Ç–æ –æ—Ç–≤–µ—á–∞—Ç—å. –ü–æ–¥—Å–∫–∞–∂–∏—Ç–µ, –ø—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞?"]
    }
    data = {}
    if CUSTOM_INTENTS_FILE.exists():
        data = json.loads(CUSTOM_INTENTS_FILE.read_text('utf-8'))
    data[cid] = new_i
    _save_custom_intents(data)
    INTENTS[cid] = new_i

    user_data['awaiting_teach'] = text
    return "–Ø –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞—é, –∫–∞–∫ –Ω–∞ —ç—Ç–æ –æ—Ç–≤–µ—á–∞—Ç—å. –ü–æ–¥—Å–∫–∞–∂–∏—Ç–µ, –ø—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞?"
