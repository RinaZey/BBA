import os
from copy import deepcopy
from pathlib import Path
from telegram import Update
from telegram.ext import (Updater, CommandHandler, MessageHandler,
                          Filters, CallbackContext)

from bot_logic      import get_response
from file_memory    import load_history, save_history, load_user_data, save_user_data, MEM_DIR
from modules.tictactoe import TicTacToe

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ plugins ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
from modules.help_module      import register_handlers as help_reg
from modules.smalltalk_module import register_handlers as smalltalk_reg
from modules.settings_module  import register_handlers as settings_reg
from modules.catalog_module   import register_handlers as catalog_reg
from modules.reminder_module  import register_handlers as reminder_reg
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

TOKEN = os.getenv("TELEGRAM_TOKEN")
if not TOKEN:
    raise SystemExit("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∞")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ handlers ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def start(update: Update, context: CallbackContext) -> None:
    """/start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –ø–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –ø–∞–º—è—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –ê–ª—å—Ñ—Ä–µ–¥, —Ç–≤–æ–π –±–æ—Ç-—Å–æ–±–µ—Å–µ–¥–Ω–∏–∫. –°–ø—Ä–∞—à–∏–≤–∞–π —á—Ç–æ —É–≥–æ–¥–Ω–æ!")
    uid = update.effective_user.id
    context.user_data.clear()                         # RAM
    (MEM_DIR / f"history_{uid}.json").unlink(missing_ok=True)
    (MEM_DIR / f"user_data_{uid}.json").unlink(missing_ok=True)

def handle_message(update: Update, context: CallbackContext) -> None:
    uid, text = update.effective_user.id, update.message.text

    # ‚ûä ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ ¬´–Ω–µ—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º—ã–µ¬ª –æ–±—ä–µ–∫—Ç—ã, —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å
    volatile_objects = {k: v for k, v in context.user_data.items()
                        if isinstance(v, TicTacToe)}          # –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –¥–æ–±–∞–≤–∏—Ç—å –∏ –¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã

    # ‚ûã ‚Äî –ø–æ–¥–Ω–∏–º–∞–µ–º –¥–æ–ª–≥—É—é –ø–∞–º—è—Ç—å
    history      = load_history(uid)
    stored_state = load_user_data(uid)

    context.user_data.clear()
    context.user_data.update(stored_state)
    context.user_data.update(volatile_objects)      # –≤–µ—Ä–Ω—É–ª–∏ RAM-–æ–±—ä–µ–∫—Ç—ã

    # ‚ûå ‚Äî –∫—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏
    if isinstance(context.user_data.get("tic_tac_toe"), TicTacToe):
        game: TicTacToe = context.user_data["tic_tac_toe"]
        result, finished = game.player_move(text)
        update.message.reply_text(result)
        if finished:
            context.user_data.pop("tic_tac_toe", None)
        return

    # ‚ûç ‚Äî teach-on-the-fly
    if "awaiting_teach" in context.user_data:
        pattern = context.user_data.pop("awaiting_teach")
        context.user_data.setdefault("custom_answers", {})[pattern] = text
        update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –Ø –∑–∞–ø–æ–º–Ω–∏–ª —Ç–≤–æ–π –ø—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞ üôÇ")
        history.append(text)
        save_history(uid, history)
        _safe_save(uid, context.user_data)
        return

    # ‚ûé ‚Äî –æ—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
    reply = get_response(text, context.user_data, history)
    update.message.reply_text(reply)

    history.append(text)
    save_history(uid, history)
    _safe_save(uid, context.user_data)

# ‚Äî‚Äî‚Äî –ø–æ–º–æ—â–Ω–∏–∫: —É–¥–∞–ª—è–µ–º –Ω–µ—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º—ã–µ –æ–±—ä–µ–∫—Ç—ã –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º ‚Äî‚Äî‚Äî
def _safe_save(uid: int, state: dict) -> None:
    safe = deepcopy(state)
    safe.pop("tic_tac_toe", None)
    save_user_data(uid, safe)
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def main() -> None:
    updater = Updater(TOKEN, use_context=True)
    dp = updater.dispatcher

    # –ø–ª–∞–≥–∏–Ω—ã
    help_reg(dp); smalltalk_reg(dp); settings_reg(dp)
    catalog_reg(dp); reminder_reg(dp)

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message), group=100)

    # –≤—ã–∫–ª—é—á–∞–µ–º webhook ‚Üí –º–æ–∂–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å long-polling
    updater.bot.delete_webhook(drop_pending_updates=True)
    updater.start_polling()
    updater.idle()

if __name__ == "__main__":
    main()
