# modules/tictactoe.py

import math
from typing import List, Tuple

class TicTacToe:
    def __init__(self):
        # –ø—É—Å—Ç–∞—è 3√ó3 –¥–æ—Å–∫–∞
        self.board: List[List[str]] = [[' ']*3 for _ in range(3)]
        self.player = 'X'
        self.bot    = 'O'

    def render(self) -> str:
        header = "  1 2 3"
        rows = []
        for i, row in enumerate(self.board):
            rows.append(
                chr(ord('A')+i) + ' ' +
                ' '.join(c if c!=' ' else '.' for c in row)
            )
        return header + '\n' + '\n'.join(rows)

    def is_full(self) -> bool:
        return all(cell!=' ' for row in self.board for cell in row)

    def check_win(self, symbol: str) -> bool:
        b = self.board
        lines = [
            [(0,0),(0,1),(0,2)], [(1,0),(1,1),(1,2)], [(2,0),(2,1),(2,2)],
            [(0,0),(1,0),(2,0)], [(0,1),(1,1),(2,1)], [(0,2),(1,2),(2,2)],
            [(0,0),(1,1),(2,2)], [(0,2),(1,1),(2,0)]
        ]
        return any(all(b[r][c]==symbol for r,c in line) for line in lines)

    def available_moves(self) -> List[Tuple[int,int]]:
        moves = []
        for i in range(3):
            for j in range(3):
                if self.board[i][j] == ' ':
                    moves.append((i,j))
        return moves

    def minimax(self, is_bot_turn: bool) -> Tuple[int, Tuple[int,int]]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (–æ—Ü–µ–Ω–∫–∞, —Ö–æ–¥) –ø–æ –∞–ª–≥–æ—Ä–∏—Ç–º—É minimax.
        –û—Ü–µ–Ω–∫–∞: +1 ‚Äî –ø–æ–±–µ–¥–∞ –±–æ—Ç–∞, -1 ‚Äî –ø–æ–±–µ–¥–∞ –∏–≥—Ä–æ–∫–∞, 0 ‚Äî –Ω–∏—á—å—è.
        """
        # –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ—Ä–º–∏–Ω–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        if self.check_win(self.bot):
            return  1, (-1,-1)
        if self.check_win(self.player):
            return -1, (-1,-1)
        if self.is_full():
            return  0, (-1,-1)

        best_move = (-1,-1)
        if is_bot_turn:
            best_score = -math.inf
            for (r,c) in self.available_moves():
                self.board[r][c] = self.bot
                score, _ = self.minimax(False)
                self.board[r][c] = ' '
                if score > best_score:
                    best_score = score
                    best_move = (r,c)
            return best_score, best_move
        else:
            best_score = math.inf
            for (r,c) in self.available_moves():
                self.board[r][c] = self.player
                score, _ = self.minimax(True)
                self.board[r][c] = ' '
                if score < best_score:
                    best_score = score
                    best_move = (r,c)
            return best_score, best_move

    def bot_move(self) -> None:
        """–î–µ–ª–∞–µ—Ç —Ö–æ–¥ –±–æ—Ç–æ–º –ø–æ Minimax."""
        _, (r,c) = self.minimax(True)
        if (r,c) != (-1,-1):
            self.board[r][c] = self.bot

    def player_move(self, coord: str) -> Tuple[str,bool]:
        """
        –ò–≥—Ä–æ–∫ –¥–µ–ª–∞–µ—Ç —Ö–æ–¥. coord –≤ —Ñ–æ—Ä–º–∞—Ç–µ "A1".."C3".
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (—Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–∞–≤–µ—Ä—à–µ–Ω–∞_–ª–∏_–∏–≥—Ä–∞).
        """
        coord = coord.strip().upper()
        if len(coord)!=2 or coord[0] not in "ABC" or coord[1] not in "123":
            return "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–æ–¥–∏ –±—É–∫–≤—É A‚ÄìC –∏ —Ü–∏—Ñ—Ä—É 1‚Äì3, –Ω–∞–ø—Ä–∏–º–µ—Ä A1.", False

        r = ord(coord[0]) - ord('A')
        c = int(coord[1]) - 1
        if self.board[r][c] != ' ':
            return "–≠—Ç–∞ –∫–ª–µ—Ç–∫–∞ —É–∂–µ –∑–∞–Ω—è—Ç–∞, –≤—ã–±–µ—Ä–∏ –¥—Ä—É–≥—É—é.", False

        # —Ö–æ–¥ –∏–≥—Ä–æ–∫–∞
        self.board[r][c] = self.player
        # –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∏–≥—Ä—ã—à
        if self.check_win(self.player):
            return self.render() + "\n–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç—ã –≤—ã–∏–≥—Ä–∞–ª! üéâ", True

        # –Ω–∏—á—å—è?
        if self.is_full():
            return self.render() + "\n–ù–∏—á—å—è! ü§ù", True

        # —Ö–æ–¥ –±–æ—Ç–∞
        self.bot_move()
        # –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∏–≥—Ä—ã—à—å –±–æ—Ç–∞
        if self.check_win(self.bot):
            return self.render() + "\n–£–≤—ã, –±–æ—Ç –≤—ã–∏–≥—Ä–∞–ª üò¢", True

        # –Ω–∏—á—å—è –ø–æ—Å–ª–µ —Ö–æ–¥–∞ –±–æ—Ç–∞?
        if self.is_full():
            return self.render() + "\n–ù–∏—á—å—è! ü§ù", True

        # –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏–≥—Ä—É
        return self.render() + "\n–¢–≤–æ–π —Ö–æ–¥ (—Ñ–æ—Ä–º–∞—Ç A1..C3):", False
